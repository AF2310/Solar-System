/*
 * This source file was generated by the Gradle 'init' task
 */

package org.example.solarsystem;

import java.util.List;
import java.util.Scanner;

/**
 * Main app for managing solar systems (stars, planets, moons)
 * through simple text menus.
 */
public class SolarSystemApp {
  Scanner scanner = new Scanner(System.in);
  private  Filemanager filemanager = new Filemanager();
  private  Registry registry = new Registry(filemanager.load());
  public SolarSystem currentSystem;

  /**
   * Shows the main menu with user choices.
   *
   *
   *
   */
  private void showMainMenu() {
    System.out.println("\n=== Solar System Registry ===");
    System.out.println("1. Create New Solar System");
    System.out.println("2. List All Solar Systems");
    System.out.println("3. Manage Solar System");
    System.out.println("4. Delete Solar System");
    System.out.println("5. Sort Solar Systems");
    System.out.println("6. Save & Exit");
    System.out.println("7. Edit Star");
  }

  
  /**
   * Displays the planet management menu for the given solar system.
   *
   * @param systemName the name of the current solar systems star
   */
  private void planetMenu(String systemName) {
    System.out.println("\n=== Managing System: " + systemName + " ===");
    System.out.println("1. Add Planet");
    System.out.println("2. Remove Planet");
    System.out.println("3. Sort Planets");
    System.out.println("4. Manage Planet Moons");
    System.out.println("5. Edit planet");
    System.out.println("6. Return to Main Menu");
  }

  /**
   * Displays moon management choices for the selected planet.
   *
   * @param planetName the name of the planet whose moons are being managed
   */
  private void printMoonMenu(String planetName) {
    System.out.println("\n=== Managing Moons of " + planetName + " ===");
    System.out.println("1. Add Moon");
    System.out.println("2. Remove Moon");
    System.out.println("3. Return to Planet List");
    System.out.println("4. move moon to other planet");
    System.out.println("5. edit moon");
  }


  /**
   * Gets a number or integer from the user ensures valid input.
   * Keeps asking until you enter a valid number.
   *
   * @return The number you entered
   */
  private int getIntInput(String prompt) {
    while (true) {
      try {
        System.out.print(prompt);
        return Integer.parseInt(scanner.nextLine());
      } catch (NumberFormatException e) {
        System.out.println("Invalid input - please enter a valid number.");
      }

    }
  }

  /**
   * Gets a non empty string input from the user ensures valid input.
   * Keeps asking until you enter a valid input.
   *
   * @return validated input.
   */
  private String getStringInput(String prompt) {
    while (true) {
      System.out.print(prompt);
      String input = scanner.nextLine().trim();
      if (!input.isEmpty()) {
        return input;
      }
      System.out.println("Input cannot be empty");
    }
  }

  /**
   * Gets a double input from the user ensures valid input.
   * Keeps asking until you enter a valid input.
   *
   * @return validated input.
   */
  private double getDoubleInput(String prompt) {
    while (true) {
      try {
        System.out.print(prompt);
        return Double.parseDouble(scanner.nextLine());
      } catch (NumberFormatException e) {
        System.out.println("Invalid input - please enter a valid number.");
      }

    }

  }

  /**
   * getter for the placeholder of the current solar system.
   *
   * @return current solar system
   */
  SolarSystem getCurrentSystem() {
    return currentSystem;
  }

  
  /**
   * setter for the placeholder of the current solar system.
   *
   */
  void setCurrentSystem(SolarSystem system) {
    this.currentSystem = system;
  }

  /**
   * Starts the program. Shows menus and methods in a loop until you choose to quit.
   * Loads saved data first.
   */
  public void start() {

    registry.load();
    while (true) {
      showMainMenu();
      int choice = getIntInput("Choose option: ");
      switch (choice) {
        case 1 -> createSolarSystem();
        case 2 -> listSolarSystems();
        case 3 -> manageSolarSystem();
        case 4 -> deleteSolarSystem();
        case 5 -> sortSolarSystems();
        case 6 -> {
          shutdown();
          return;
        }
        case 7 -> editStar(currentSystem);
        default -> System.out.println("Invalid option");

      }
    }
  }


  /**
   * Lets you pick a solar system to work with.
   * After choosing, you can edit its planets/moons.
   */
  private void manageSolarSystem() {
    SolarSystem system = selectSystem();
    if (system == null) {
      return;
    }
    currentSystem = system;
    systemMenuLoop(currentSystem);
    //currentSystem = selectSystem();
    //systemMenuLoop(currentSystem);

    
    
  }
  
  /**
   * Displays all available solar systems and lets the user select one.
   *
   * @return The selected SolarSystem or null if canceled.
   */
  private SolarSystem selectSystem() {
    List<SolarSystem> systems = registry.getSolarSystems();
    if (systems.isEmpty()) {
      System.out.println("No solar systems available!");
      return null;
    }
    System.out.println("\n=== Select Solar System ===");
    for (int i = 0; i < systems.size(); i++) {
      Star star = systems.get(i).getStar();
      System.out.printf("%d. %s (Radius: %,d km)%n",
            i + 1, star.getName(), star.getAvgRadiusInKm());
    }
    while (true) {
      int choice = getIntInput("Enter number (0 to cancel): ");
      if (choice == 0) {
        return null;
      }
      if (choice > 0 && choice <= systems.size()) {
        return systems.get(choice - 1);
      }
      System.out.println("invalid selection");
    }

  }

  /**
   * Displays the system management menu allows you to
   * perform actions on a systems planets.
   *
   */
  private void systemMenuLoop(SolarSystem system) {
    while (true) {
      System.out.println("\n== managing: " + system.getStar().getName() + " ==");
      planetMenu(system.getStar().getName());
      switch (getIntInput("Choose option: ")) {
        case 1 -> addPlanetToSystem(system);
        case 2 -> removePlanetfromSystem(system);
        case 3 -> sortAndDisplay(system);
        case 4 -> managePlanetMoons(system);
        case 5 -> editPlanet(system);
        case 6 -> {
          return;
        }
        default -> System.out.println("Invalid option");
      }
        
    }
  }

  /**
   * Sorts and displays the planets in the current system.
   *
   */
  private void sortAndDisplay(SolarSystem system) {
    System.out.println("1. Sort by Size\n2. Sort by Orbit");
    List<Planet> sorted = switch (getIntInput("")) {
      case 1 -> system.getPlanetsSortedBySize();
      case 2 -> system.getPlanetsSortedByOrbit();
      default -> {
        System.out.println("Invalid option"); 
        yield system.getPlanets();
      }
    };
    sorted.forEach(p -> System.out.println(p.toString()));
  }

  /**
   * Manages moons of a selected planet in a solar system.
   *
   */
  private void managePlanetMoons(SolarSystem system) {
    
    Planet planet = selectPlanet(system);
    
    if (planet == null) {
      return;
    }
    System.out.println("\nmanaging moons for: " + planet.getName());
    moonMenuLoop(planet);

  }

  /**
   * Displays moon-specific operations for a given planet.
   *
   */
  private void moonMenuLoop(Planet planet) {
    while (true) {
      printMoonMenu(planet.getName());
      int choice = getIntInput("choose option: ");
      switch (choice) {
        case 1 -> addMoonToPlanet(planet);
        case 2 -> removeMoonFromPlanet(planet);
        case 3 -> {
          return;
        }
        case 4 -> moveMoon(planet);
        case 5 -> editMoon(planet);
        default -> System.out.println("Invalid option");
      }
    }
  }

  /**
   * Saves all data to file and closes the program.
   * Called when you pick save and exit option.
   */
  private void shutdown() {
    try {
      registry.save();
      System.out.println("saved successfully");

    } catch (Exception e) {
      System.err.println(" error during save: " + e.getMessage());
    } finally {
      scanner.close();
    }
    System.exit(0);
  }
  
  public static void main(String[] args) {
    new SolarSystemApp().start();
  }

  /**
   * Displays all registered solar systems in the registry.
   * Shows star name and radius for each system
   */
  private void listSolarSystems() {
    List<SolarSystem> systems = registry.getSolarSystems();
    if (systems.isEmpty()) {
      System.out.println("No solar systems available.");
      return;
    }
    systems.forEach(s ->
        System.out.println(s.getStar().getName() + " - "
        + s.getStar().getAvgRadiusInKm() + "km")
    );
  }

  /**
   * Deletes a selected solar system from the registry.
   * Requires user confirmation through system selection
   */
  private void deleteSolarSystem() {
    SolarSystem system = selectSystem();
    if (system == null) {
      return;
    }
    boolean removed = registry.removeSolarSystem(system.getStar().getName());
    System.out.println("solar system deleted");
  }

  /**
   * Creates a new solar system with user inputted parameters.
   *
   * @throws IllegalArgumentException for invalid radius values
   */
  private void createSolarSystem() {
    String name = getStringInput("Enter star name: ");
    int radius = getIntInput("Enter star radius: ");
    
    try {
      Star star = new Star(name, radius);
      registry.addSolarSystem(new SolarSystem(star));
      System.out.println("Solar system created!");
    } catch (IllegalArgumentException e) {
      System.out.println(e.getMessage());
    }
  }

  /**
   * Sorts and displays solar systems by different criteria.
   * either  by Star radius or by name
   */
  private void sortSolarSystems() {
    System.out.println("1. Sort by Size\n2. Sort by Orbit");
    List<SolarSystem> sorted = switch (getIntInput("")) {
      case 1 -> registry.getSolarSystemsSortedByStarRadius();
      case 2 -> registry.getSolarSystemsSortedByName();
      default -> {
        System.out.println("Invalid option");
        yield registry.getSolarSystems();
      }
    };
    sorted.forEach(p -> System.out.println(p.toString()));
  }

  /**
   * Edits properties of a solar systems central star.
   *
   * @param system Solar system containing the star to modify.
   */
  protected void editStar(SolarSystem system) {
    if (system == null) {
      system = selectSystem();
      if (system == null) {
        System.out.println("No system selected. Aborting edit.");
        return;
      }
    }
    Star oldStar = system.getStar();
    System.out.println("\n--- Edit Star: " + oldStar.getName() + " ---");
    String newName = getStringInput("New name input , \""
        + oldStar.getName() + "\"): ");
    
    int newRadius = getIntInput("New radius input, "
        + oldStar.getAvgRadiusInKm() + " km): ");

    if (newName.isBlank()) {
      newName = oldStar.getName();
    }

    if (newRadius <= 0) {
      newRadius = oldStar.getAvgRadiusInKm();
    }

    try {
      Star updated = new Star(newName, newRadius);
      SolarSystem updatedSystem = new SolarSystem(updated);
      for (Planet p : system.getPlanets()) {
        updatedSystem.addPlanet(p);
      }
      registry.removeSolarSystem(oldStar.getName());
      registry.addSolarSystem(updatedSystem);
      currentSystem = updatedSystem;
      System.out.println("Star update successful");

    } catch (IllegalArgumentException e) {
      System.out.println("Update failed: " + e.getMessage());

    }

  }


  /**
   * Selects a planet by user input from the current solar system.
   *
   * @param system Solar system containing planets.
   *
   * @return Selected Planet object or null if canceled
   */
  private Planet selectPlanet(SolarSystem system) {
    List<Planet> planets = system.getPlanets();
    if (planets.isEmpty()) {
      System.out.println("No planets in this system!");
      return null;
    }

    System.out.println("\navailable Planets:");
    for (int i = 0; i < planets.size(); i++) {
      Planet planet = planets.get(i);
      System.out.println((i + 1) + ". " + planet.getName());
    }

    int choice = getIntInput("Select a planet by number (press 0 to cancel): ");
    if (choice > 0 && choice <= planets.size()) {
      return planets.get(choice - 1);
    } else {
      System.out.println("invalid selection or canceled.");
      return null;
    }


  }

  /**
   * Adds a new planet to the specified solar system.
   *
   * @param system Target solar system for planet addition
   * @throws IllegalArgumentException for invalid parameters
   */
  private void addPlanetToSystem(SolarSystem system) {
    String name = getStringInput("Planet name: ");
    int radius = getIntInput("Planet radius (km): ");
    double orbit = getDoubleInput("Orbital radius (km): ");
    try {
      system.addPlanet(new Planet(name, radius, orbit));
      System.out.println("Planet added successfully!");
    } catch (IllegalArgumentException e) {
      System.out.println("Error: " + e.getMessage());

    }

  }

  /**
   * Removes a planet and its moons from a solar system.
   *
   * @param system Solar system containing the planet
   */
  private void removePlanetfromSystem(SolarSystem system) {
    Planet planet = selectPlanet(system);
    if (planet == null) {
      System.out.println("Operation canceled.");
      return;
    }
    planet.getMoons().clear(); // Clear moons before removal
    boolean removed = system.removePlanet(planet.getName());
    System.out.println(removed ? "Planet removed." : "Failed to remove planet.");

  }

  /**
   * Modifies properties of an existing planet by user input.
   *
   * @param system Solar system containing the planet
   */
  protected void editPlanet(SolarSystem system) {
    Planet planet = selectPlanet(system);
    if (planet == null) {
      return;
    }
    System.out.println("Editing planet: " + planet.getName());
    String newName = getStringInput("New name  \""
        + planet.getName() + "\"): ");
    if (newName.isEmpty()) {
      newName = planet.getName();
    }
    int newRadius = getIntInput("New radius : ");
    if (newRadius == 0) {
      newRadius = planet.getAvgRadiusInKm();
    }
    double newOrbit = getDoubleInput("New orbital radius : ");
    if (newOrbit == 0) {
      newOrbit = planet.getAvgOrbitRadiusInKm();
    }
    try {
      system.removePlanet(planet.getName());
      Planet updated = new Planet(
          newName.isEmpty() ? planet.getName() : newName,
          newRadius,
          newOrbit

        );
      
      for (Moon moon : planet.getMoons()) {
        updated.addMoon(moon);
      }

      system.addPlanet(updated);
      System.out.println("Planet update successful.");

        
    } catch (IllegalArgumentException e) {
      system.addPlanet(planet);
      System.out.println("Error: " + e.getMessage());
    }


  }

  /**
   * Adds a moon to the specified planet.
   *
   * @param planet Target planet for moon addition
   *
   * @throws IllegalArgumentException for invalid parameters
   */
  private void addMoonToPlanet(Planet planet) {
    String name = getStringInput("Moon name: ");
    int radius = getIntInput("Moon radius (km): ");
    double orbit = getDoubleInput("Orbital radius (km): ");
    try {
      planet.addMoon(new Moon(name, radius, orbit));
      System.out.println("Moon added successfully!");
    } catch (IllegalArgumentException e) {
      System.out.println("Error: " + e.getMessage());
      
    }
  }

  /**
   * Removes a moon from the specified planet by user choice.
   *
   * @param planet Planet containing moons to remove
   */
  private void removeMoonFromPlanet(Planet planet) {
    List<Moon> moons = planet.getMoons();
    if (moons.isEmpty()) {
      System.out.println("No moons to remove.");
      return;
    }
    System.out.println("\navailable Moons:");
    for (int i = 0; i < moons.size(); i++) {
      Moon m = moons.get(i);
      System.out.printf("%d. %s (Radius: %,d km)%n", i + 1, m.getName(), m.getAvgRadiusInKm());
    }
    int choice = getIntInput("Select moon to remove (0 to cancel): ");
    if (choice == 0) {
      System.out.println("Operation canceled.");
    } else if (choice > 0 && choice <= moons.size()) {
      Moon moon = moons.get(choice - 1);
      if (planet.removeMoon(moon.getName())) {
        System.out.println("Moon removed successfully!");
      } else {
        System.out.println("Failed to remove moon.");
      }
    }
  }
  
  /**
   * Moves a moon between planets within the same solar system.
   *
   * @param sourcePlanet Original planet containing the moon
   */
  void moveMoon(Planet sourcePlanet) {
    
    if (sourcePlanet.getMoons().isEmpty()) {
      System.out.println("No moons to move.");
      return;
    }
    Moon moon = selectMoon(sourcePlanet);
    if (moon == null) {
      return;
    }
    System.out.println("\nSelect destination planet:");
    Planet destPlanet = selectPlanet(currentSystem);
    boolean removed = sourcePlanet.removeMoon(moon.getName());
    if (!removed) {
      System.out.println("Failed to remove moon from source planet.");
      return;
    }
    if (destPlanet == null) {
      return;
    }
    try {

      //sourcePlanet.removeMoon(moon.getName());

      destPlanet.addMoon(moon);
      
      System.out.println("Moon moved ");
    } catch (IllegalArgumentException e) {
      System.out.println("Cannot move moon: " + e.getMessage());
      sourcePlanet.addMoon(moon);
    }


  }

  /**
   * Selects a moon from a planet orbit.
   *
   * @param planet Planet containing moons.
   * @return Selected Moon object or null if canceled
   */
  Moon selectMoon(Planet planet) {
    List<Moon> moons = planet.getMoons();
    if (planet.getMoons().isEmpty()) {
      System.out.println("No moons available.");
      return null;
    }

    System.out.println("\nAvailable Moons:");
    for (int i = 0; i < moons.size(); i++) {
      System.out.printf("%d. %s%n", i + 1, moons.get(i).getName());
    }

    int choice = getIntInput("Select moon (0 to cancel): ");
    if (choice > 0 && choice <= moons.size()) {
      return moons.get(choice - 1);
    }
    return null;


  }


  /**
   * Modifies properties of an existing moon.
   *
   * @param planet Planet containing the moon to edit
   */
  protected void editMoon(Planet planet) {
    if (planet.getMoons().isEmpty()) {
      System.out.println("This planet has no moons.");
      return;
    }
    Moon moon = selectMoon(planet);
    if (moon == null) {
      return;
    }

    System.out.println("Editing Moon: " + moon.getName());
    String newName = getStringInput("New name input ,'" + moon.getName() + "'): ");
    int newRadius = getIntInput("New radius : ");
    double newOrbit = getDoubleInput("New orbit radius : ");
    try {
      Moon updated = new Moon(
          newName.isBlank() ? moon.getName() : newName,
          newRadius,
          newOrbit
      );
      planet.removeMoon(moon.getName());
      planet.addMoon(updated);
      System.out.println("Moon update successful");
    } catch (IllegalArgumentException e) {
      System.out.println("Error: " + e.getMessage());

    }

  }


}



  
  


